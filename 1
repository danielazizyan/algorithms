//linear search

#include <iostream>
using namespace std;

int search(int arr[], int n, int x)
{
	int i;
	for (i = 0; i < n; i++)
		if (arr[i] == x)
			return i;
	return -1;
}


int main(void)
{
	int arr[] = { 2, 3, 4, 10, 40 };
	int x = 10;
	int n = sizeof(arr) / sizeof(arr[0]);


	int result = search(arr, n, x);
	(result == -1)
		? cout << "Element is not present in array"
		: cout << "Element is present at index " << result;
	return 0;
}





//binary search iterative

#include <iostream>
using namespace std;
 

int binarySearch(int arr[], int low, int high, int x)
{
    while (low <= high) {
        int mid = low + (high-low) / 2;
 
        if (arr[mid] == x)
            return mid;
        if (arr[mid] < x)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}
 
int main(void)
{
    int arr[] = { 3, 4, 5, 8, 12, 16 };
    int x = 12;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = binarySearch(arr, 0, n - 1, x);
    (result == -1)
        ? cout << "Element is not present in array"
        : cout << "Element is present at index " << result;
    return 0;
}






//binary search recursive
#include <iostream>
using namespace std;
 

int binarySearch(int arr[], int low, int high, int x)
{
    if (high >= low) {
        int mid = low + (high-low) / 2;
 
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binarySearch(arr, low, mid - 1, x);
        else
            return binarySearch(arr, mid + 1, high, x);
    }
    return -1;
}
 
int main(void)
{
    int arr[] = { 3, 4, 5, 8, 12, 16 };
    int x = 12;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = binarySearch(arr, 0, n - 1, x);
    (result == -1)
        ? cout << "Element is not present in array"
        : cout << "Element is present at index " << result;
    return 0;
}





//exponential search

#include <iostream>
using namespace std;


int binarySearch(int arr[], int low, int high, int x);

int exponentialSearch(int arr[], int n, int x)
{
    if (arr[0])
    return 0;
    
    int i = 1;
    while(i < n && arr[i] <= x)
    i = i*2;
    
    return binarySearch(arr, i/2, min(i, n-1), x);
}




int binarySearch(int arr[], int low, int high, int x)
{
    if (low <= high) {
        int mid = low + (high-low) / 2;
 
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binarySearch(arr, low, mid - 1, x);
        else
            return binarySearch(arr, mid + 1, high, x);
    }
    return -1;
}
 
int main(void)
{
    int arr[] = { 3, 4, 5, 8, 12, 16 };
    int x = 4;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = binarySearch(arr, 0, n - 1, x);
    (result == -1)
        ? cout << "Element is not present in array"
        : cout << "Element is present at index " << result;
    return 0;
}








//insertion sort with randnum

#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
using namespace std;

void RANDNUMBERS(int A[], int n);
void INSERTIONSORT(int A[], int n);

int main()
{   srand(time(0));
    const int n=10;
    int A[n], j;
    RANDNUMBERS(A, n);
    INSERTIONSORT(A, n);
    cout<<endl;
    for (int j=0; j<n; j++) 
    cout<<setw(5)<<A[j];
}
void INSERTIONSORT(int A[], int n)
{for (int j=1; j<n; j++)
       {int key=A[j];
         int i=j-1;
             while((i>=0) && A[i]>key)
                     {A[i+1]=A[i];
                        i=i-1;
                      }
        A[i+1]=key;
       }
}
void RANDNUMBERS(int A[], int n)
{  for (int i=1; i<=n; i++) 
            { A[i-1]=rand() % 100 + 1;
               cout<<setw(5)<<A[i-1];
                if(i % n ==0) cout << endl;
                }
}






//insertion sort with user input

#include <iostream>
using namespace std;
void INSERTIONSORT(int A[], int n);
int main()
{const int n=10;
  int A[n]; int j;
  cout << "Enter elements of the array: \n";
  for (j=0; j<n; j++) cin>>A[j];
  INSERTIONSORT(A, n);
  for (j=0; j<n; j++) cout<<A[j]<<"  "; 
}
void INSERTIONSORT(int A[], int n)
{for (int j=1; j<n; j++)
       {int key=A[j];
         int i=j-1;
             while((i>=0) && A[i]>key)
                     {A[i+1]=A[i];
                        i=i-1;
                      }
        A[i+1]=key;
       }
}






//selection sort

#include <iostream>
using namespace std;
void SELECTIONSORT(int A[], int n);
int main()
{const int n=10;
 int A[n], j;
 cout << "Enter the elements of the array: \n";
 for(j=0; j<n; j++) cin>>A[j];
     for(j=0; j<n; j++) cout<<A[j]<< " " ;
     cout<<endl;
     SELECTIONSORT(A, n);
     for(j=0; j<n; j++) cout<<A[j]<< " " ;
}
void SELECTIONSORT(int A[], int n)
{int i, j, min, temp;
 for(j=0; j<n-1; j++)
      { for(min=j, i=j+1; i<n; i++)
              if(A[i]<A[min]) min=i;
                  temp=A[j];
                  A[j] = A[min];
                  A[min] = temp;
      } 
}






//bubble sort

#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
using namespace std;
void RANDNUMBERS(int A[], int n);
void BUBBLESORT(int A[], int n);
int main()
{ srand(time(0));
  const int n=10;  int A[n];
  RANDNUMBERS(A, n);
  BUBBLESORT(A, n); cout<<endl;
  for (int j=1; j<=n; j++) 
        {cout<<setw(5)<<A[j-1];
          if (j%10==0) cout<<endl;
         }
}
void BUBBLESORT(int A[], int n)
{bool swapped = true;
  int j=0; int tmp;
  while (swapped)
    {swapped = false;
      j++;
      for(int i=0; i<n-j; i++) 
      {if (A[i]>A[i+1])
       { tmp = A[i];
         A[i]= A[i+1];
         A[i+1]=tmp;
       swapped=true;
        }
       }
     }
  }
void RANDNUMBERS(int A[], int n)
{  for (int i=1; i<=n; i++) 
            { A[i-1]=1+rand() % 100;
               cout<<setw(5)<<A[i-1];
                if(i % 10 ==0) cout << endl;
                }
}






//shakersort

#include <iostream>
using namespace std;
void SHAKERSORT(int A[], int n);
int main()
{const int n=10;
  int A[n]; int j;
  cout << "Enter elements of the array: \n";
  for (j=0; j<n; j++) cin>>A[j];
  SHAKERSORT(A, n);
  for (j=0; j<n; j++) cout<<A[j]<<"  "; 
}
void SHAKERSORT(int A[], int n)
{int L=1, R=n-1, k=n-1;
  int j, temp;
  do
     {for (j=R; j >= L; j--)
        if (A[j-1] >A[j])
           {temp = A[j-1] ;  
             A[j-1]  = A[j];  
             A[j] = temp;  
             k=j; 
       }    
      L= k+1; 
       for (j=L; j <= R; j++)
        if (A[j-1] >A[j])
           {temp = A[j-1] ;  
             A[j-1]  = A[j];  
             A[j] = temp;  
             k=j; 
       }    
      R= k-1;
     } while (L<=R);
   }

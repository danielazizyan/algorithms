


























































//insertion sort linear search

#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>

using namespace std;

void RANDNUMBERS(int A[], int n);
void INSERTIONSORT(int A[], int n);
int LINEARSEARCH(int A[], int n, int x);

int main(){
srand(time(0));
const int n=10;
int A[n], j;
RANDNUMBERS(A, n);
INSERTIONSORT(A, n);
cout<<endl;
for (j=0; j<n; j++)
{
    cout << setw(5) << A[j];
}
cout<<endl;

int x = 22;
int result = LINEARSEARCH(A, n, x);
if(result == -1)
    cout << "Element is not present in the array";
    else
    cout << "Element is present at index: " << result;
    
return 0;
}

void INSERTIONSORT(int A[], int n){
    for(int j=1; j<n; j++)
    {
        int key=A[j];
        int i=j-1;
        while((i>=0) && A[i]>key){
            A[i+1] = A[i];
            i--;
        
        }
        A[i+1] = key;
    }
}

int  LINEARSEARCH(int A[], int n, int x){ 
    for(int i=0; i<n; i++) 
        if (A[i]==x)
        return i;
   return (-1);
}

void RANDNUMBERS(int A[], int n){
    for (int i=1; i<=n; i++)
    {
       A[i-1]=rand() % 41 + 15;
       cout << setw(5) << A[i-1];
       if(i%n==0) cout << endl;
    }
}








//selection sort linear search

#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>

using namespace std;

void RANDNUMBERS(int A[], int n);
void SELECTIONSORT(int A[], int n);
int  LINEARSEARCH(int A[], int n, int x);

int main(){
srand(time(0));
const int n=10;
int A[n], j;
RANDNUMBERS(A, n);
SELECTIONSORT(A, n);
cout<<endl;
for (j=0; j<n; j++)
{
    cout << setw(5) << A[j];
}
cout<<endl;

int x = 22;
int result = LINEARSEARCH(A, n, x);
if(result == -1)
    cout << "Element is not present in the array";
    else
    cout << "Element is present at index: " << result;
    
return 0;
}


void SELECTIONSORT(int A[], int n){
int i, j, min, temp;
    for(j=0; j<n-1; j++){
        for(min=j, i=j+1; i<n; i++)
            if(A[i]<A[min])
            min = i;
            temp = A[j];
            A[j] = A[min];
            A[min] = temp;
    }
}

int  LINEARSEARCH(int A[], int n, int x){ 
    for(int i=0; i<n; i++) 
        if (A[i]==x)
        return i;
   return (-1);
}


void RANDNUMBERS(int A[], int n){
    for (int i=1; i<=n; i++)
    {
       A[i-1]=rand() % 41 + 15;
       cout << setw(5) << A[i-1];
       if(i%n==0) cout << endl;
    }
}









//bubble sort linear search

#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>

using namespace std;

void RANDNUMBERS(int A[], int n);
void BUBBLESORT(int A[], int n);
int  LINEARSEARCH(int A[], int n, int x);

int main(){
srand(time(0));
const int n=10;
int A[n], j;
RANDNUMBERS(A, n);
BUBBLESORT(A, n);
cout<<endl;
for (j=0; j<n; j++)
{
    cout << setw(5) << A[j];
}
cout<<endl;

int x = 22;
int result = LINEARSEARCH(A, n, x);
if(result == -1)
    cout << "Element is not present in the array";
    else
    cout << "Element is present at index: " << result;
    
return 0;
}

void BUBBLESORT(int A[], int n)
{bool swapped = true;
  int j=0; int tmp;
  while (swapped)
    {swapped = false;
      j++;
      for(int i=0; i<n-j; i++) 
      {if (A[i]>A[i+1])
       { tmp = A[i];
         A[i]= A[i+1];
         A[i+1]=tmp;
       swapped=true;
        }
       }
     }
  }
  
int  LINEARSEARCH(int A[], int n, int x){ 
    for(int i=0; i<n; i++) 
        if (A[i]==x)
        return i;
   return (-1);
} 

void RANDNUMBERS(int A[], int n){
    for (int i=1; i<=n; i++)
    {
       A[i-1]=rand() % 41 + 15;
       cout << setw(5) << A[i-1];
       if(i%n==0) cout << endl;
    }
}








// shaker sort linear search

#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>

using namespace std;

void RANDNUMBERS(int A[], int n);
void SHAKERSORT(int A[], int n);
int  LINEARSEARCH(int A[], int n, int x);

int main(){
srand(time(0));
const int n=10;
int A[n], j;
RANDNUMBERS(A, n);
SHAKERSORT(A, n);
cout<<endl;
for (j=0; j<n; j++)
{
    cout << setw(5) << A[j];
}
cout<<endl;

int x = 22;
int result = LINEARSEARCH(A, n, x);
if(result == -1)
    cout << "Element is not present in the array";
    else
    cout << "Element is present at index: " << result;
    
return 0;
}

void SHAKERSORT(int A[], int n)
{int L=1, R=n-1, k=n-1;
  int j, temp;
  do
     {for (j=R; j >= L; j--)
        if (A[j-1] >A[j])
           {temp = A[j-1] ;  
             A[j-1]  = A[j];  
             A[j] = temp;  
             k=j; 
       }    
      L= k+1; 
       for (j=L; j <= R; j++)
        if (A[j-1] >A[j])
           {temp = A[j-1] ;  
             A[j-1]  = A[j];  
             A[j] = temp;  
             k=j; 
       }    
      R= k-1;
     } while (L<=R);
   }

int  LINEARSEARCH(int A[], int n, int x){ 
    for(int i=0; i<n; i++) 
        if (A[i]==x)
        return i;
   return (-1);
} 


void RANDNUMBERS(int A[], int n){
    for (int i=1; i<=n; i++)
    {
       A[i-1]=rand() % 41 + 15;
       cout << setw(5) << A[i-1];
       if(i%n==0) cout << endl;
    }
}










// shell sort linear search

#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>

using namespace std;

void RANDNUMBERS(int A[], int n);
void SHELLSORT(int A[], int n);
int  LINEARSEARCH(int A[], int n, int x);

int main(){
srand(time(0));
const int n=10;
int A[n], j;
RANDNUMBERS(A, n);
SHELLSORT(A, n);
cout<<endl;
for (j=0; j<n; j++)
{
    cout << setw(5) << A[j];
}
cout<<endl;

int x = 22;
int result = LINEARSEARCH(A, n, x);
if(result == -1)
    cout << "Element is not present in the array";
    else
    cout << "Element is present at index: " << result;
    
return 0;
}

void SHELLSORT(int A[], int n) {
  for (int interval = n / 2; interval > 0; interval /= 2) {
      for (int i = interval; i < n; i += 1) {
      int temp = A[i];
      int j;
      for (j = i; j >= interval && A[j - interval] > temp; j -= interval) {
        A[j] = A[j - interval];
      }
      A[j] = temp;
    }
  }
}

int  LINEARSEARCH(int A[], int n, int x){ 
    for(int i=0; i<n; i++) 
        if (A[i]==x)
        return i;
   return (-1);
} 


void RANDNUMBERS(int A[], int n){
    for (int i=1; i<=n; i++)
    {
       A[i-1]=rand() % 41 + 15;
       cout << setw(5) << A[i-1];
       if(i%n==0) cout << endl;
    }
}




















//binary search iterative

#include <iostream>
using namespace std;
 

int binarySearch(int arr[], int low, int high, int x)
{
    while (low <= high) {
        int mid = low + (high-low) / 2;
 
        if (arr[mid] == x)
            return mid;
        if (arr[mid] < x)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}
 
int main(void)
{
    int arr[] = { 3, 4, 5, 8, 12, 16 };
    int x = 12;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = binarySearch(arr, 0, n - 1, x);
    (result == -1)
        ? cout << "Element is not present in array"
        : cout << "Element is present at index " << result;
    return 0;
}






//binary search recursive
#include <iostream>
using namespace std;
 

int binarySearch(int arr[], int low, int high, int x)
{
    if (high >= low) {
        int mid = low + (high-low) / 2;
 
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binarySearch(arr, low, mid - 1, x);
        else
            return binarySearch(arr, mid + 1, high, x);
    }
    return -1;
}
 
int main(void)
{
    int arr[] = { 3, 4, 5, 8, 12, 16 };
    int x = 12;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = binarySearch(arr, 0, n - 1, x);
    (result == -1)
        ? cout << "Element is not present in array"
        : cout << "Element is present at index " << result;
    return 0;
}





//exponential search

#include <iostream>
using namespace std;


int binarySearch(int arr[], int low, int high, int x);

int exponentialSearch(int arr[], int n, int x)
{
    if (arr[0])
    return 0;
    
    int i = 1;
    while(i < n && arr[i] <= x)
    i = i*2;
    
    return binarySearch(arr, i/2, min(i, n-1), x);
}




int binarySearch(int arr[], int low, int high, int x)
{
    if (low <= high) {
        int mid = low + (high-low) / 2;
 
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binarySearch(arr, low, mid - 1, x);
        else
            return binarySearch(arr, mid + 1, high, x);
    }
    return -1;
}
 
int main(void)
{
    int arr[] = { 3, 4, 5, 8, 12, 16 };
    int x = 4;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = binarySearch(arr, 0, n - 1, x);
    (result == -1)
        ? cout << "Element is not present in array"
        : cout << "Element is present at index " << result;
    return 0;
}
